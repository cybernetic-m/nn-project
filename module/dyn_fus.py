# TO DO with KANs?
import torch.nn as nn
import torch


class Dynamic_Fusion(nn.Module):

    def __init__(self, n_input):

        super(Dynamic_Fusion,self).__init__()

        # Trainable Parameters generated by Uniform probability distribution
        self.weights = nn.Parameter(torch.rand(n_input, 1), requires_grad=True)  

    def forward(self, x):
        x = torch.matmul(x, self.weights) # Weighted summation at the end
        out = x.squeeze(x, axis=-1) # Eliminate the last "1" (column vector) [1, 10, 1] -> [1, 10]
        return out



        
    


        
        




        
        